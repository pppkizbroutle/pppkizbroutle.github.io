#+title: Complejidad Computacional
#+author: Erik Rangel Limón
#+startup: latexpreview

* Rubros

* Notas

** 15 / 08 / 23

*** Contexto

    ¿Cuáles son las capacidades fundamentales y limitaciones de las
    compuitadoras?

    - Teoría de Autómatas

      - ¿Cómo podemos hacer cómputo?

    - Teoría de Computabilidad

      - ¿Qué podemos computar?

    - Teoría de la Complejidad

      - ¿Qué es lo que hace a algunos problemas compuacionalmente
	difíciles y otros fáciles?
          
*** Preguntas

    - ¿Qué es un problema?

    - ¿Qué es un algoritmo?

    - ¿A qué nos referimos con un Algoritmo eficiente?

** 16 / 08 / 23

*** Análisis del peor caso

    El peor caso es el máximo número de operaciones elementales del
    algoritmo sobre cualquier ejemplar de tamaño n. Este análisis
    proporciona una cota superior sobre ele tiempo de ejecución y
    garantiza la eficiencia o no del algoritmo. El peor caso puede
    ocurrir pocas veces.

*** Análisis del mejor caso

    El mínimo número de operaciones elementales de un algoritmo para
    cualquier ejemplar de tamaño n es demasiado *optimista* y no
    garantiza eficiencia, solo da una *cota inferior* sobre el tiempo de
    ejecución.

*** Tiempo de ejecución

    Depende de cuanto tiempo le tome a una computadora ejecutar las
    líneas de código del algoritmo:

    - ¿Cuánto tiempo se tarda el algoritmo en términos del tamaño de
      su entrada?

    - ¿Qué tan rápido crece una función con el tamaño de la entrada?
      (tasa de crecimiento)


    Cuando descartamos los coeficientes constantes y los término menos
    significativos usamos /notación asintótica/. Veremos 3 formas:
    notación $\Theta$ grande, notación $O$-grande y notacion $\Omega$
    -grande.
    
*** O - grande

    Si un tiempo de ejecución es $O(f(n))$. Entonces para una $n$
    suficentemente grande el tiempo de ejecución es $k\cdot f(n)$.
    Usamos esta notación para cotas asintóticas superiores
    (acota por arriba, a lo más).

*** Omega grande

    (acota por abajo, a lo menos)

*** Theta grante

    (Cota asintótica ajustada)

*** Función de complejidad

    *Definición*: Cualquier función que representa el tiempo de
    ejecución de un algoritmo se conoce como función de complejidad.

    $C=\lim_{n\to\infty}\frac{f(n)}{g(n)}$

    $C<\infty$ -> $f(n)=O(g(n))$

** 17 / 08 / 23

*** Problemas, algoritmos y soluciones

    
   

* Bibliografia
