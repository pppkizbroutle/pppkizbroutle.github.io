#+title: Laboratorio de Estructuras Discretas
#+author: Erik Rangel Limón
#+startup: latexpreview

[[../index.org][Anterior]]

* Sesión Introductoria

** Dinámica de las prácticas

   - Las entregas serán por medio de /Github Classroom/.

   - Por cada práctica, se les creará un repositorio para cada alumnx
     o equipo.

   - En éste repositorio que se les creará tendrá:

     1. Un pdf con la especificación de la práctica.

     2. Un archivo =README.md= vacío que deberá ser llenado por ustedes.

     3. Una carpeta =src= con el contenido de la práctica

   - Por lo general el contenido de la carpeta =src= serán dos archivos:
     
     1. Un archivo terminación =.hs= con una serie de ejercicios a
        resolver por ustedes.

     2. Un programa con nombre =Test.hs= que verifica la solución a su
        práctica, _NO SE DEBE MODIFICAR_.

   - Todas las prácticas serán hechas en el lenguaje de programación
     /Haskell/ y sus soluciones serán verificadas usando la biblioteca
     /QuickCheck/.

   - Cada práctica tendrá las instrucciones necesarias para que
     completen su práctica, pero por lo general tienen que hacer dos
     cosas:

     1. Resolver todos los ejercicios indicados en el =.pdf=

     2. Llenar el archivo =README.md= el cuál deberá llevar: número de
        practica, sus nombres completos, y por cada ejercicio resuelto
        deberán describir brevemente cómo llegaron a la solución del
        ejercicio.

   - La calificación de su práctica será determinada por el número de
     pruebas que pasen sobre 10 menos los puntos de penalización que hayan
     tenido.

*** Consideraciones

    - Cualquier copia total o parcial tanto en los ejercicios como en
      su =README= será motivo de anular la calificación de la
      práctica a los involucrados dando aviso al profesor.

    - Los únicos ejercicios con respuestas iguales admisibles serán
      aquellos que sean vistos en el laboratorio.

    - No entregar el =README= o tenerlo incompleto se penalizará con
      hasta 5 puntos tomando en cuenta los ejercicios que hayan
      realizado.

      Por ejemplo, si sólo pudieron resolver correctamente 4 de 5
      ejercicios, sólo deberan explicar al menos esos 4 ejercicios que
      tuvieron bien para no tener ninguna penalización.

      Si resolvieron 6 de 7 ejercicios correctamente, pero les faltó
      explicar uno tendrían $\frac{1}{6}\times 5=0.83$ puntos de
      penalización.

      Es decir, si resolvieron correctamente $n$ ejercicios, pero no
      explicaron $p$ de esos ejercicios, su penalización sería $\frac{p}{n}\times 5$.

      Si no pudieron resolver correctamente un ejercicio en lugar de
      dejar una explicación pueden describir qué fue lo que intentaron
      y con qué problema se enfrentaron. De ser así al momento de
      calificar intentaré resolver las dudas que les surgieron, y
      tienen la posibilidad de recuperar parte del puntaje perdido por
      no haber tenido correcto el ejercicio.

    - Si una explicación no es satisfactoria, también será penalizada.

    - No se recibirán prácticas en donde hayan modificado los tests,
      si encuentran un error deberán informarme y de ser necesario yo
      les indicaré qué es lo que deben o pueden modificar.

    - No se recibirán prácticas que no compilen.

    - Los ejercicios a resolver tendrán la siguiente forma:

      #+begin_src haskell
miSuma :: Int -> Int -> Int -- | Esta es la firma de la función
miSuma = undefined -- | Aquí va la definición de la función
      #+end_src

      No deben modificar ni el nombre de la función, ni su firma,
      tampoco deberán eliminar el ejercicio, de hacerlo la práctica no
      compilará.

      Si no resuelven algún ejercicio déjenlo como =undefined= para que
      siempre compile su práctica y consideremos el resto de
      ejercicios.

    - El primer día de retraso tendrán 1 punto de penalización, el
      segundo tendrán 2 puntos adicionales (en total 3), y el tercero
      3 puntos adicionales (en total 6); a partir del cuarto día ya no
      se reciben prácticas.

    - Únicamente para el primer día de retraso las prácticas
      entregadas en la madrugada (hasta las 6:00 a.m.) no tendrán
      ninguna penalización.

      Es decir si la entrega era el 16 de agosto hasta las 11:59
      p.m. las prácticas entregadas antes de las 6:00 a.m. del 17 de
      agosto no tendrán penalización.

    - Recorreremos la fecha de entrega de las prácticas si por alguna
      razón no pudimos tener una sesión de laboratorio (por paros), no
      se puedan aceptar evaluaciones en la fecha de entrega (por
      paros, también) o si no terminamos de ver lo necesario para
      completar su práctica.

    - Las peticiones grupales para recorrer la fecha de entrega sólo
      serán tomadas en cuenta si son por las siguientes razones:

      - Dificultad; para lo cual entonces debe haber una considerable
        cantidad de dudas sobre la práctica en cuestión durante las
        sesiones de laboratorio, en mi correo o en mi telegram.

	Es decir, si todos se están atorando en algún ejercicio de la
        práctica, y me lo pueden comprobar, lo consideraré.

      - Carga de trabajo; para lo cual, la mayor parte del grupo debe
        llevar avances significativos en sus respectivos repositorios.

	Muchas veces se pueden juntar exámenes, tareas y proyectos, y
        es comprensible, podemos extender las entregas, siempre y
        cuando la mayor parte del grupo tenga avances en su práctica.

	Si la mayoría no ha empezado su práctica o llevan pocos
        ejercicios, la petición no será tomada en cuenta.

* Haskell

  Es el lenguaje de programación que utilizaremos para sus sesiones en
  el laboratorio.

  En la programación existen dos grandes paradigmas

  - Programación imperativa:

    Son los lenguajes como /Python/, /Java/, /C/, /C++/, /Ruby/, /Lua/.

    En este tipo de programación se describe /cómo/ es la ejecución de
    un programa, es decir, se debe indicar paso por paso cómo va a ser
    la evolución de la memoria dentro de un programa.

    Si ya anteriormente han programado, podrían entender el siguiente
    pseudocódigo:

    #+begin_src prog
x = 0
y = x + 2
x = x + y
x = x * 2
y = x + y
print(y)
    #+end_src

    En el pseudocódigo anterior le estamos indicando cómo se le van a
    asignar a las variables =x= y =y= paso por paso.

  - Programación declarativa:

    Lenguajes como /Haskell/, /Racket/, /Lisp/, /Prolog/.

    En éste tipo de lenguajes en lugar de describir cómo es un
    programa, le indicamos /qué/ es un programa, esto por medio de
    hechos lógicos, funciones matemáticas y otros.

    $f(x,y) = x + y$
  
* Instalación

  =ghc cabal-install=

  Para este curso necesitaremos un compilador de /Haskell/, y un
  administrador de bibliotecas del lenguaje como /Cabal/.

  La instalación puede variar según su sistema operativo, y es común
  que entre administradores de paquetes de distintas distribuciones de
  linux instalen versiones distintas de los programas necesarios.

  Afortunadamente existe una herramienta que puede unificar el proceso
  de instalación para todos los sistemas operativos.

  [[https://www.haskell.org/ghcup/install/]]

  /GHCup/ nos permite administrar versiones de los programas
  relacionados con el lenguaje de programación haskell.

* Tutorial

  #+begin_src haskell
-- Clase de haskell:

x :: Int
x = 10

i :: Integer
i = 367239123678216478367612471623782638716238762187361872361873628173687216387216387216387216387216216387
  
y :: Float
y =  10.64

z :: Double
z = 10.64

c :: Char
c = 'a'

s :: String
s = "Hola"

var :: Int
var = 5

var2 :: Int
var2 = 6

tupla1 :: (Int, String)
tupla1 = (10, "Cadena")

tupla2 :: (Int, Char, Float, Double, String)
tupla2 = (1, 'a', 0.5, 0.10, "Adios")

f :: Double -> Double
f x = x ^ 2

a :: Double
a = f 128371893129.0
  #+end_src

  El anterior es el archivo que hicimos el viernest 16 de Agosto.

  Guárdenlo en un archivo con extensión =.hs=, por ejemplo =tutorial.hs=.

  Recuerden que para cargar el archivo en el intérprete es con el
  comando:

  #+begin_src bash
$ ghci tutorial.hs
  #+end_src

  Desde luego, estando en el directorio en donde se encuentra el
  archivo =tutorial.hs=.

  ésto les abrirá el intérprete tomando como contexto el archivo que
  crearon.

* Glosario de comandos en ghci

  - =:l= para cargar un archivo desde el intérprete. (Estando en el
    directorio donde se encuentra el archivo.)

    #+begin_src haskell
ghci> :l tutorial.hs
[1 of 2] Compiling Main             ( tutorial.hs, interpreted )
Ok, one module loaded.
ghci> :l tutorial.hs
    #+end_src

  - =:r= para recargar un achivo que ya fue cargado en =ghci=
    anteriormente.

    #+begin_src haskell
ghci> :r
[1 of 2] Compiling Main             ( tutorial.hs, interpreted ) [Source file changed]
Ok, one module loaded.
ghci> 
    #+end_src

  - Dentro del intérprete pueden utilizar las funciones o variables
    creadas:

    #+begin_src haskell
ghci> f 5
25.0
ghci> a
1.6479342945523397e22  
    #+end_src
  
* Tipos de dato algebraicos y coincidencia de patrones

  En matemáticas discretas podemos introducir definiciones de
  conjuntos como estructuras recursivas dando los casos de definición
  y un axioma de clausura, indicando que ninguna otra cosa forma parte
  de lo definido.

  Los tipos de dato algebraicos han sido adoptados por distintos
  lenguajes de programación, particularmente los funcionales, en donde
  /Haskell/ no es la excepción.

  Nosotros podemos crear tipos de dato a partir de definir quienes van
  a ser elementos de ese tipo (ese conjunto).

  Por ejemplo, tomemos en cuenta una definición simple de los colores
  que componen el esquema de colores /RGB/.

  El conjunto de colores /RGB/ se construye con las siguientes reglas:

  1. El Rojo es un color /RGB/.
  2. El Verde es un color /RGB/.
  3. El Azul es un color /RGB/.
  4. Sólo los elementos generados por 1, 2 y 3 son colores /RGB/.


  En Haskell podemos dar estas mismas definiciones, con la palabra
  reservada =data=.

  #+begin_src haskell
data RGB = Rojo
         | Verde
         | Azul
  #+end_src

  En donde =RGB= corresponde al nombre que queremos que tenga nuestro
  tipo de dato, este nombre *siempre debe iniciar con mayúscula*.

  Despúes del === siguen las reglas que componen a ese tipo de dato,
  separando cada una de ellas por un =|=.

  Y cada regla comienza con el nombre de lo que se conoce como el
  *constructor*, en este caso los constructores son =Rojo=, =Verde=,
  =Azul=. Los constructores también pueden llevar cualquier nombre
  siempre y cuando *comiencen con mayúscula*.

  Con esto definido ya podemos considerar el tipo de dato =RGB= para
  utilizarlo en variables o funciones.

  #+begin_src haskell
azul :: RGB
azul = Azul

verde :: RGB
verde = Rojo
  #+end_src

** Coincidencia de patrones

   Y bueno, ¿cómo realizamos operaciones con éste tipo de dato que
   acabamos de crear?

   =Haskell= tiene una característica que permite descomponer la forma
   que tiene una expresión y ver con qué caso le corresponde.

   Supongamos que queremos hacer una función que nos regrese en una
   cadena de texto cuál es el color que está recibiendo.

   #+begin_src haskell
color :: RGB -> String
color x = case x of
            Rojo -> "El color es rojo"
            Verde -> "El color es verde"
            Azul -> "El color es azul"
   #+end_src

   Una forma de hacerlo es con la expresión =case ... of=. En donde lo
   que sigue después del =case= es la expresión que queremos
   analizar. En este caso, por la firma que tiene la función, sabemos
   que =x= es del tipo =RGB= y que =x= sólo tiene tres formas de
   construirse: =Rojo=, =Verde= y =Azul=.

   Con esta coincidencia de patrones =haskell= revisará con qué
   expresión que pusieron después del =of= coincide primero la expresión
   =x= (es decir, revisará en el orden que hayan puesto los casos, en
   este ejemplo, primero revisará si =x= es =Rojo=, después =Verde= y al
   final =Azul=).

   #+begin_src haskell
ghci> color Azul
"El color es azul"
   #+end_src

   Siempre va a ser una buena práctica colocar todas las formas
   posibles que podría tener =x=, pues =haskell= compilará aún si no
   abarcaron todos los casos posibles, por ejemplo:

   #+begin_src haskell
color' :: RGB -> String
color' x = case x of
             Rojo -> "El color es rojo"
             Verde -> "El color es verde"
   #+end_src

   Pero en este caso =haskell= nos lanzará un error cuando intentemos
   evaluar la función con el valor =Azul=.

   #+begin_src haskell
ghci> color' Azul
"*** Exception: ej.hs:(6,12)-(8,41): Non-exhaustive patterns in case
   #+end_src
   
   Precisamente nos dice que no fuimos exhaustivos en nuestra
   coincidencia de patrones.

   No es la única forma en la que podemos hacer coincidencia de
   patrones, en este caso como sólo nos importa qué forma tiene el
   mismo parámetro de la función, entonces podríamos reducir la
   función anterior como sigue:

   #+begin_src haskell
color1 :: RGB -> String
color1 Rojo = "El color es rojo"
color1 Verde = "El color es verde"
color1 Azul = "El color es azul"
   #+end_src

   Poniendo definiciones distintas para cada caso de =x=.

   También podemos dar definiciones incompletas y también nos
   devolverá un error:

   #+begin_src haskell
color1' :: RGB -> String
color1' Rojo = "El color es rojo"
color1' Verde = "El color es verde"
   #+end_src

   #+begin_src haskell
ghci> color1' Azul
"*** Exception: ej.hs:(11,1)-(12,35): Non-exhaustive patterns in function color1'
   #+end_src

   ¿Cuándo queremos utilizar la función =case ... of= en lugar de
   utilizar coincidencia de patrones directamente en el parámetro?

   Imaginemos que tenemos la función que nos da el color que sigue al
   que recibió como parámetro.

   #+begin_src haskell
siguiente :: RGB -> RGB
siguiente Rojo = Verde
siguiente Verde = Azul
siguiente Azul = Rojo
   #+end_src

   Este orden es arbitrario, pero con esta expresión intento decir que
   el color que le sigue al rojo es el verde, y al que le sigue al
   verde es el azul.

   Si quisiéramos hacer una función que nos diga en una cadena de
   texto cuál es el color que le sigue a otro, una forma de hacerlo
   podría ser recordando ese orden y hacer la función de esa forma.

   #+begin_src haskell
siguienteColor :: RGB -> String
siguienteColor Rojo = "El color que sigue es el verde"
...
   #+end_src

   Sin embargo, esto no es una buena práctica ya que nosotros de una u
   otra forma estamos imitando la funcionalidad de =siguiente= que
   habíamos definido con anterioridad, y los programadores siempre
   tenemos que evitar de reinventar la rueda a toda costa.

   Bueno, pues gracias a =case ... of= podemos capturar los resultados
   que nos puede regresar la función =siguiente=.

   #+begin_src haskell
siguienteColor :: RGB -> String
siguienteColor x = case siguiente x of
                     Rojo -> "El color que sigue es el rojo"
                     Verde -> "El color que sigue es el verde"
                     Azul -> "El color que sigue es el azul"
   #+end_src

   Entonces una forma de hacer coincidencia de patrones no desprecia a
   la otra, utilicen las dos como mejor les convenga.

** Constructores con parámetros

   Nuestros constructores en las definiciones de tipo de dato pueden
   tener parámetros.

   Supongamos que queremos un tipo de dato que nos diga una
   combinación de dos colores.

   #+begin_src haskell
data Combinacion = Comb RGB RGB
   #+end_src

   En este caso =Comb= es un constructor que tiene dos parámetros, y en
   estos sólamente indicamos el tipo que queremos que tengan esos
   parámetros.
   
   ¿Y cómo manejamos éste tipo de dato?

   Supongamos que queremos una función que nos diga el primer color
   que conforma la combinación:

   #+begin_src haskell
primero :: Combinacion -> RGB
primero c = ...
   #+end_src

   Bueno, el primer parámetro es una Combinacion, entonces podemos
   descomponer el parámetro =c= usando coincidencia de patrones, y en
   este caso como recibe parámetros es necesario descomponerlo entre
   paréntesis.

   #+begin_src haskell
primero :: Combinacion -> RGB
primero (Comb ...) = ...  
   #+end_src

   ¿Pero qué es lo que sigue? Bueno, sabemos que ambos parámetros son
   de tipo =RGB=, entonces también los podríamos descomponer.

   #+begin_src haskell
primero :: Combinacion -> RGB
primero (Comb Rojo Rojo) = Rojo
primero (Comb Rojo Verde) = Rojo
primero (Comb Rojo Azul) = Rojo
...
   #+end_src

   Pero, ¿es necesario revisar absolutamente todas las posibilidades
   de esas dos entradas cuando únicamente sólo nos interesa el primer
   color? No, y por eso también podemos reemplazar esos dos parámetros
   con variables.

   #+begin_src haskell
primero :: Combinacion -> RGB
primero (Comb primerColor segundoColor) = primerColor
   #+end_src

   Usando variables estamos indicándole a =Haskell= que cualquier caso
   (en este caso del =RGB=) puede ser capturado dentro esas variables.
   
   Supongamos que queremos hacer un tipo de dato para los números
   complejos, es decir que contengan un número para la parte real, y
   otro número real para la parte imaginaria.

   #+begin_src haskell
data Complejo = Comp Double Double
   #+end_src

   =Comp= va a ser el constructor que tiene dos parámetros, en este caso
   decidimos que ambos parámetros que corresponden para la parte real
   y la parte imaginaria (en ese orden) fueran =Double=.

   Y la forma de hacer coincidencia de patrones con éste tipo de dato
   es como sigue:

   #+begin_src haskell
parteReal :: Complejo -> Double
parteReal (Comp r i) = r
   #+end_src

   En donde =r= corresponde al primer =Double= que es el que vamos a
   tratar como la parte real del número e =i= como la que vamos a tratar
   como imaginaria.

   Por eso es que las tuplas se pueden manejar de la siguiente forma en =haskell=

   #+begin_src haskell
sumatupla :: (Int, Int) -> Int
sumatupla (x,y) = x + y
   #+end_src

   Revisa la forma que tiene la tupla y hacemos coincidencia de
   patrones con ella.

** Tipos de dato recursivos

   Así mismo como en matemáticas podemos también dar definiciones de
   tipos de dato (de conjuntos) de forma inductiva/recursiva.

   Recordemos las reglas para construir los números naturales:

   1. $0$ es un número natural.
   2. Si $n$ es un número natural, entonces el sucesor de $n$
      ($Suc(n)$) también es un número natural.
   3. Sólo los elementos generados por 1 y 2 son naturales.


   En =Haskell= podemos recrear este tipo de dato bajo esta misma
   semántica combinando constructores sencillos, como constructores
   con parámetros.

   #+begin_src haskell
data Natural = Cero
             | Suc Natural
   #+end_src

   =Cero= sería nuestro caso base, y =Suc= es un constructor que recibe
   otro número natural como parámetro.

   Nótese que en ésta definición estamos utilizando a los mismos
   números naturales para definir a los números naturales.

   Y con esto ya tenemos una definición de los naturales.

   #+begin_src haskell
cero :: Natural
cero = Cero

uno :: Natural
uno = Suc Cero

dos :: Natural
dos = Suc (Suc (Cero))

tres :: Natural
tres = Suc dos
   #+end_src

   Como ejemplo, definamos la suma entre naturales:

   #+begin_src haskell
sumaNat :: Natural -> Natural -> Natural
sumaNat Cero m = m
sumaNat (Suc n) m = sumaNat n (Suc m)
   #+end_src
   
** Tipos de dato con parámetros

   Nuestros tipos de dato también pueden llevar parámetros en su
   definición; recrearemos el tipo de dato =Maybe= de =Haskell=:

   #+begin_src haskell
data Talvez a = Nada
              | Solo a
   #+end_src

   ¿Qué significa ésto?

   =Talvez a= define el nombre del tipo =Talvez= y la =a= es una variable
   que representa un tipo cualquiera que usaremos dentro de la
   definición y la nombraremos como =a=.

   Tiene un constructor básico =Nada=, y un constructor con parámetro
   =Solo= cuyo primer parámetro debe ser algo del tipo =a=.

   Ejemplos de tipos de dato =Talvez=:

   #+begin_src haskell
talvez1 :: Talvez Int
talvez1 = Solo 10

talvez2 :: Talvez Int
talvez2 = Nada

talvez3 :: Talvez String
talvez3 = Solo "Hola"

talvez4 :: Talvez Double
talvez4 = Nada

talvez5 :: Talvez Natural
talvez5 = Solo (Suc Cero)

talvez6 :: Talvez (Talvez Int)
talvez6 = Solo (Solo 1)
   #+end_src

   ¿Qué utilidad tiene este tipo de dato?

   Funciona para devolver errores y capturarlos.

   Consideremos el operador =/=, qué nos devuelve si intentamos dividir
   por cero?

   #+begin_src haskell
ghci> 1 / 0
Infinity
ghci> 0 / 0
NaN
   #+end_src

   En ambos casos nos deuvelve un error que es algo complicado de
   capturar.

   Hagamos una función para realizar la división de manera "segura".

   #+begin_src haskell
safediv :: Double -> Double -> Talvez Double
safediv x y
  | y == 0 = Nada
  | otherwise = Solo (x / y)
   #+end_src

   De esta forma podemos capturar estos errores al momento de realizar
   más operaciones con éstos elementos.

   Supongamos que queremos utilizar esta función y al final al
   resultado añadirle uno si es que no ocurrió un error:

   #+begin_src haskell
divadd1 :: Double -> Double -> Talvez Double
divadd1 x y = case safediv x y of
                Nada -> Nada
                Solo r -> Solo (r + 1)
   #+end_src

   La definición del tipo de dato =Maybe= (que ya viene en /haskell/) es
   como sigue:

   #+begin_src haskell
data Maybe a = Nothing
             | Just a 
   #+end_src
   
   También las definiciones de tipo pueden llevar más de un parámetro
   en su tipo. Definamos nuestra propia tupla

   #+begin_src haskell
data Tupla a b = Tup a b
   #+end_src

   Recibe dos tipos cualesquiera =a= y =b=, y su constructor =Tup= recibe
   esos mismos parámetros respectivamente.

   #+begin_src haskell
intDouble :: Tupla Int Double
intDouble = Tup 5 10.9

stringDouble :: Tupla String Double
stringDouble = Tup "Hola" 10.18
   #+end_src

* Listas

  Las listas de elementos de tipo $A$ se construyen con las siguientes
  reglas:

  1. La lista vacía es una lista de elementos de tipo $A$.

  2. Si $X$ es un elemento de tipo $A$ y $XS$ una lista de elementos
     de tipo $A$, entonces la construcción de $X$ con $XS$ ($X:XS$) es
     otra lista de elementos de tipo $A$.

  3. Sólo los elementos construidos con las reglas 1 y 2 son listas de
     elementos de tipo $A$.


  Entonces podemos describir una lista en /haskell/ de la siguiente
  forma:

  #+begin_src haskell
data Lista a = Nil
             | Cons a (Lista a)
  #+end_src

  #+begin_src haskell
nums :: Lista Int
nums = Cons 1 (Cons 2 (Cons 3 Nil))

strings :: Lista String
strings = Cons "Hola" (Cons "grupo" Nil)

nil :: Lista Double
nil = Nil

unEntero :: Lista Int
unEntero = Cons 1 Nil

listaDeListas :: Lista (Lista Int)
listaDeListas = Cons (Cons 1 (Cons 2 Nil)) (Cons (Cons 3 (Cons 4 Nil)) Nil)
  #+end_src

  /Haskell/ ya tiene su propia definición de listas, y es algo parecido
  a la siguiente:

  #+begin_src haskell
data [] a = []
          | a : ([] a)
  #+end_src

  Aquí ellos utilizan un operador =:= en lugar de un constructor como
  nosotros los hemos visto, y ésto es posible porque Haskell admite
  operadores binarios en lugar de constructores tradicionales siempre
  y cuando éstos comiencen con =:=

  De esta forma /Haskell/ perite la construcción de listas de la
  siguiente manera:

  #+begin_src haskell
nums :: [] Int
nums = 1 : 2 : 3 []

strings :: [] String
strings = "Hola" : "grupo" : []

nil :: [] Double
nil = []

listaDeListas :: [] ([] Int)
listaDeListas = (1 : 2 : []) : (3 : 4 : []) : []
  #+end_src

  Y /haskell/ ofrece una sintaxis aún más sencilla para construir
  estas mismas listas, es la siguiente:

  #+begin_src haskell
nums :: [Int]
nums = [1,2,3]

strings :: [String]
strings = ["Hola","grupo"]

nil :: [Double]
nil = []

listaDeListas :: [[Int]]
listaDeListas = [[1,2],[3,4]]
  #+end_src

** Coincidencia de patrones

   Para las listas, la coincidencia de patrones se puede realizar de
   una forma muy versátil.

   Digamos que queremos hacer una función que nos diga verdadero si
   una lista es vacía o falso en otro caso.

   #+begin_src haskell
vacia :: [Int] -> Bool
vacia [] = True
vacia xs = False
   #+end_src

   Para capturar el caso de la lista vacía, lo logramos con =[]=, y
   cualquier otro caso es capturado por la variable =xs=.

   Notemos que en el segundo caso no utilizamos si quiera la variable
   =xs=, entonces podemos indicarle a /Haskell/ que ignore totalmente su
   valor con el uso del comodín =_=.

   #+begin_src haskell
vacia :: [Int] -> Bool
vacia [] = True
vacia _ = False
   #+end_src

   En la coincidencia de patrones, el comodín =_= podrá capturar
   cualquier caso igual que con las variables, con la diferencia de
   que /haskell/ ignorará completamente su valor y nos dará directamente
   la definición que le hayamos dado.

   ¿Y si quisiéramos una función que nos diga si una lista tiene
   exactamente un elemento?

   #+begin_src haskell
individual :: [Int] -> Bool
individual [x] = True
individual _ = False
   #+end_src

   Con el patrón =[x]= indicamos que queremos capturar exactamente
   cuando la lista tenga un único elemento.

   Y de nuevo, como estamos ignorando el valor de =x= y no lo estamos
   utilizando en la definición, podemos cambiarlo por un comodín.

   #+begin_src haskell
individual :: [Int] -> Bool
individual [_] = True
individual _ = False
   #+end_src

   De la misma forma, podemos capturar cuando haya exactamente cierto
   número de elementos durante la caza de patrones.

   #+begin_src haskell
listaConTres :: [Int] -> Bool
listaConTres [_,_,_] = True
listaConTres _ = False
   #+end_src

   Ahora bien, supongamos que queremos una función que nos regrese el
   primer elemento de una lista si es que tiene elementos.

   #+begin_src haskell
cabeza :: [Int] -> Int
cabeza (x:xs) = x
   #+end_src

   Podemos hacer coincidencia de patrones con la definición inductiva
   separando la cabeza de la lista =x= con la cola =xs=. Y de nuevo, como
   no estamos utilizando =xs= en la definición podemos reemplazarlo con
   un comodín.

   #+begin_src haskell
cabeza :: [Int] -> Int
cabeza (x:_) = x
   #+end_src

   Nótese que esta es una definición incompleta, ya que sólo le
   estamos indicando qué hacer cuando la lista tiene la forma
   =cabeza:cola=, pero no cuando es vacía, por lo que si le pasamos una
   lista vacía, ésta nos lanzará una excepción.

   A veces querrán utilizar éste tipo de funciones para hacer más
   sencillas ciertas operaciones, pero deben tener cuidado con los
   parámetros que le están pasando, y asegurarse que no sea un
   parámetro que ocasione un error.

   Ahora, uno que regrese la cola de una lista.

   #+begin_src haskell
cola :: [Int] -> [Int]
cola (_:xs) = xs
   #+end_src

   ¿Si ahora queremos uno que nos regrese el segundo elemento de una
   lista?

   #+begin_src haskell
segundoElemento :: [Int] -> Int
segundoElemento (x:xs) = ...
   #+end_src

   Sabemos que podemos acceder al primer elemento de la lista, y en
   éste caso es =x=, ¿pero el segundo? no podemos devolver =xs= porque
   ésta es una lista, no un elemento.

   Bueno, aprovechemos que =xs= es una lista para descomponerla también en algo que tiene cabeza y cola.

   #+begin_src haskell
segundoElemento :: [Int] -> Int
segundoElemento (x:(y:ys)) = y
   #+end_src

   Y por tanto el segundo elemento es =y=.

   Cabe decir que los parentesis más internos no son necesarios, pues el operador =:= asocia hacia la derecha, es decir:

   #+begin_src haskell
segundoElemento :: [Int] -> Int
segundoElemento (x:y:ys) = y
   #+end_src

* Ejercicios de recursión

  #+begin_src haskell
-- | Dada una lista de enteros, calcula la suma de todos sus elementos
suma :: [Int] -> Int
suma = undefined

-- | Dada una lista de enteros, calcula la multiplicación de todos sus
-- elementos.
multiplicacion :: [Int] -> Int
multiplicacion = undefined

-- | Dadas dos listas de enteros, une las dos listas en una sola,
-- conservando el mismo orden
une :: [Int] -> [Int] -> [Int]
une = undefined

-- | Dados dos enteros, genera una lista de enteros que empieza desde
-- el primero y termina en el segundo
enumera :: Int -> Int -> [Int]
enumera = undefined
  #+end_src

  
