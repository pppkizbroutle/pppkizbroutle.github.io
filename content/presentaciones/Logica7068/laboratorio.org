#+title: Laboratorio
#+author: Erik Rangel Limón
#+startup: latexpreview


* Haskell

  Es el lenguaje de programación que utilizaremos para realizar
  la mayor parte de las prácticas de laboratorio.

  Se propone éste lenguaje pues cuenta con transparencia referencial,
  lo que garantiza que se pueda reemplazar una expresión con otra de
  igual valor sin cambiar el significado de éste. Como consecuencia,
  una función siempre producirá el mismo resultado para una entrada
  dada, por lo que es posible construir, razonar y manipular programas
  funcionales como si se tratasen de una expresión matemática.

** Instalación

   /Haskell/ es un lenguaje compilado, pero también puede comportarse
   como un programa interpretado. Ambas herramientas vienen al
   instalar /GHC/ (/Glasgow Haskell Compiler/), el cuál es el compilador
   más usado hoy en día para /Haskell/.

   /Haskell/ también cuenta con un administrador de paquetes /Cabal/,
   mediante el cual puedes instalar nuevas bibliotecas y programas. En
   particular la utilizaremos más adelante para instalar /QuickCheck/.

   Tanto /Haskell/ y /Cabal/ pueden ser instaladas con =ghcup=, que es un
   instalador para éstos y más programas en torno a /Haskell/, y para
   cualquier sistema basado en /Unix/, y los sistemas operativos /Windows/
   y /MacOS/.

   Las instrucciones específicas de cada sistema vienen en la
   siguiente página:

   https://www.haskell.org/ghcup/install/#installation

   
*** Requerimientos

    - Debian >= 12:

      #+begin_src shell
build-essential curl libffi-dev libffi8 libgmp-dev libgmp10 libncurses-dev libncurses5 libtinfo5
      #+end_src

    - Ubuntu >= 23:

      #+begin_src shell
build-essential curl libffi-dev libffi8ubuntu1 libgmp-dev libgmp10 libncurses-dev
      #+end_src

    - Fedora:

      #+begin_src shell
gcc gcc-c++ gmp gmp-devel make ncurses ncurses-compat-libs xz perl
      #+end_src

    - Linux:

      Investiguen según su distribución cómo instalar los siguientes paquetes:
    
      #+begin_src shell
curl g++ gcc gmp make ncurses realpath xz-utils
      #+end_src

    - Mac M1:

      En los sistemas operativos /OS X/ los programas requeridos se
      configuran al instalar =ghcup=, posiblemente tengan que ejecutar
      el comando otra vez.

      En computadoras con /M1/, deben investiguen cómo instalar =llvm= con
      =hombrew= y cómo exponerlo en el =PATH=.

*** GHCup

    El comando que debe utilizarse para instalarlo en /Linux/, /macOS/,
    /FreeBSD/ o /WSL2/ es el siguiente:

    #+begin_src shell
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
    #+end_src

    (al 29 de enero de 2024, revisen la página si es que ésto cambia).

    Al terminar la instalación reinicien su =shell= y el comando =ghcup
    tui= les abrirá una interfaz de terminal por la cual podrán navegar
    por las distintas versiones de /GHC/ y /Cabal/, sólo asegúrense de
    usar las versiones de ambas herramientas respectivamente.

*** Administrador de paquetes

    Además de instalar los requerimientos mencionados anteriormente,
    los programas que necesitan por lo general llevan los nombres de
    =ghc= y =cabal-install=.

    
** Introducción

   La extensión comúnmente usada para los archivos es =.hs=
   
*** Variables y tipos primitivos

    | Tipo          | Ejemplo              |
    |---------------+----------------------|
    | Int           | ...,-2,-1,0,1,2,...  |
    | Float, Double | 1.0,-1.25,2.5,...    |
    | Bool          | True, False          |
    | Char          | 'a','b','c','\n',... |
    | Integer       | ...,-1,0,1,2,3,...   |

    La creación de variables se puede hacer de la siguiente forma:

    #+begin_src haskell
x :: Int
x = 5

x' :: Float
x' = 10.42
  
y :: Double
y = 10.4283762683

z :: Bool
z = False

c :: Char
c = 'a'
    #+end_src

    
**** Inmutabilidad

     En /Haskell/ todas las variables son inmutables, es decir, una vez
     que se definen, ya no pueden cambiar su valor.

     Por ejemplo, el siguiente código nos arrojará un error:
    
     #+begin_src haskell
num :: Int
num = 1

num :: Int
num = 2
     #+end_src

*** Funciones

    Las funciones en /Haskell/ juegan un papel esencial (claro, por eso
    es un lenguaje de programación funcional).

    En matemáticas, una función es una relación de elementos de un
    conjunto $A$ a elementos de un conjunto $B$, donde un elemento de
    $A$ se "mapea" con un único elemento del conjunto $B$.

    Considera una función que eleva al cuadrado un número entero, su
    dominio y codominio se denotaría como sigue:

    $f:\mathbb{Z}\to\mathbb{Z}$

    Se define la función:
    
    $f(x)=x^2$

    Y para evaluar la función, sustituyes los parámetros de la función
    por un valor:

    $f(2)=2^2=4$

    $f(3)=3^2=9$

    Análogamente, el tipo de esta función se denotaría como:

    #+begin_src haskell
f :: Int -> Int
f x = x ^ 2
    #+end_src

    Y para evaluar una función:

    #+begin_src haskell
resultado1 :: Int
resultado1 = f 2

resultado2 :: Int
resultado2 = f 3
    #+end_src

    Para abrir el intérprete de /Haskell/, lo puédes abrir con
    =ghci=. Para cargar un archivo dentro del intérprete, lo puedes
    hacer con el comando =:t ruta/del/archivo.hs=

    Y puedes evaluar las funciones o variables que definiste.

    #+begin_src haskell
ghci> f 12
144
ghci> f 9
81
ghci> resultado1
4
ghci> resultado2
9
    #+end_src

    Sin embargo, cabe mencionar que la lógica para funciones
    multivariadas cambia, al menos con los tipos.

    Si ahora queremos hacer una función que recibe dos enteros y
    devuelve otro entero (la suma de ambos), lo haríamos de la
    siguiente forma:

    #+begin_src haskell
suma :: Int -> Int -> Int
suma x y = x + y
    #+end_src

    Y para una función de 3 parámetros:

    #+begin_src haskell
suma3 :: Int -> Int -> Int -> Int
suma3 x y z = x + y + z
    #+end_src

*** Operadores

    Aritméticas:

    - Suma: =+=
    - Resta: =-=
    - Multiplicación: =*=
    - División (Real): =/=
    - División (Entera): =div=
    - Potencia: =^=


    Booleanas:

    - Negación: =not=
    - Conjunción: =&&=
    - Disyunción: =||=


    Comparación:

    - Igualdad: ====
    - Desigualdad: =/==
    - Menor que: =<=
    - Mayor que: =>=
    - Menor igual: =<==
    - Mayor igual: =>==
    
*** Precedencia

    Consideremos la función que dados dos números, suma los cuadrados
    de ambos

    #+begin_src haskell
sumaCuadrados :: Int -> Int -> Int
sumaCuadrados x y = x^2 + y^2
    #+end_src

    esta es una definición de función, cabe recordar que los nombres
    de funciones y variables deben siempre iniciar con una letra
    minúscula seguido de una serie de caracteres alfanuméricos.

    Las funciones definidas de esta manera como ya vimos, las podemos
    utilizar de la siguiente forma:

    #+begin_src haskell
ghci> suma_cuadrados 2 3
13
    #+end_src

    Sin embargo, también es posible aplicar la función de manera
    infija, escribiendo el nombre de la función entre dos acentos
    graves =`=:

    #+begin_src haskell
ghci> 2 `suma_cuadrados` 3
13
ghci> 5 `div` 2
2
    #+end_src

    Pero haskell también nos deja crear nuestros propios operadores, y
    su nombre puede ser cualquier combinación de los siguientes
    símbolos:

    =! # $ * + . / < = > ? \ ^ | : - ~ %=

    Para denotar su tipo lo hacemos entre paréntesis:

    #+begin_src haskell
(<+<) :: Int -> Int -> Int
x <+< y = x^2 + y^2
    #+end_src

    También es válido dar la definición de manera prefija escribiendo
    el operador entre paréntesis.

    #+begin_src haskell
(<+<) :: Int -> Int -> Int
(<+<) x y = x^2 + y^2
    #+end_src

    Y ya lo podemos utilizar como cualquier otro operador

    #+begin_src haskell
ghci> 2 <+< 3
13
    #+end_src

    De la misma manera es posible utilizar cualquier operador de
    manera prefija escribiendo el nombre del operador entre
    paréntesis:

    #+begin_src haskell
ghci> (<+<) 2 3
13
ghci> (+) 2 3
5
ghci> (-) 5 2
3
    #+end_src

    Al utilizar notación infija estamos eliminando el uso de
    paréntesis

    #+begin_src haskell
(<+<) ((<+<) 2 3) 4
    #+end_src

    #+begin_src haskell
(2 <+< 3) <+< 4
2 <+< 3 <+< 4 -- Por defecto los operadores asocian a la izquierda
    #+end_src

    #+begin_src haskell
  5/2+3*2/3*(231)
    #+end_src

    Sin embargo al combinarlo con otros operadores, posiblemente
    queramos que asocie de una forma distinta, y esto lo podemos hacer
    con las palabras reservadas =infixl= e =infixr=, por ejemplo, la
    asociatividas y precedencia de las operaciones aritméticas básicas
    se muestra como sigue:

    #+begin_src haskell
infixl 6 +, -
infixl 7 *, /
    #+end_src

    Y si quisiéramos que el operador =<+<= tuviera la misma precedencia
    que la multiplicación y la división, lo tendríamos que definir
    como sigue:

    #+begin_src haskell
infixl 7 <+<
    #+end_src

    #+begin_src haskell
ghci> 5 * 2 <+< 3 - 1
108
    #+end_src

*** Funciones anónimas

    ¿Y si necesitamos hacer una función auxiliar que nada más usaré
    una vez, vale la pena definirla si quiera?

    #+begin_src haskell
ghci> (\x -> x + 1) 4
5
ghci> (\x y -> x + y) 5 4
9
ghci> (\x y z -> x * y - z) 5 4 3
17
    #+end_src

** Listas, definiciones de tipos de dato y coincidencia de patrones

    ¿Recuerdan la definición inductiva de listas?

    Listas con elementos de un tipo $A$:

    - La lista vacía $[]$, es una lista con elementos de tipo $A$.
      
    - Si $x$ (cabeza) es un elemento de tipo $A$ y $xs$ una lista con
      elementos de tipo $A$, entonces $x:xs$ es una lista de elementos
      de tipo $A$.

    - Son todas.


    En /Haskell/ también existen las listas bajo la misma semántica de
    la definición inductiva.

    Primero, podemos definir nuestros propios tipos de dato:

    #+begin_src haskell
data Color = Rojo | Verde | Azul
    #+end_src

    =Rojo=, =Verde= y =Azul= son constructores

    Funcionan similar a una enumeración en java.

    #+begin_src haskell
favorito :: Color
favorito = Verde
    #+end_src

    Estas definiciones de tipos de dato pueden contener otros tipos,
    por ejemplo:

    #+begin_src haskell
data Figura = Cuadrado Double
            | Rectangulo Double Double
            | Circulo Double
    #+end_src

    =Cuadrado=, =Rectangulo= y =Circulo= son los constructores

    #+begin_src haskell
cuadrado :: Figura
cuadrado = Cuadrado 4.2

rectangulo :: Figura
rectangulo = Rectangulo 1.2 5.5

circulo :: Figura
circulo = Circulo 2.3
    #+end_src

    ¿Que pasa si un constructor tiene muchos tipos?
    
    #+begin_src haskell
data Alumno = Alumno String String Double Int
    #+end_src

    Podemos usar la sintaxis /record/:

    #+begin_src haskell
data Alumno = Alumno { nombre :: String
                     , noCuenta :: String
                     , calif :: Double
                     , asistencias :: Int}
    #+end_src

    #+begin_src haskell
limon :: Alumno
limon = Alumno { noCuenta = "123456789"
              , calif = 4.8
              , nombre = "Erik Rangel Limón"
              , asistencias = 2 }
    #+end_src
    
    #+begin_src haskell
ghci> noCuenta erik
"123456789"
    #+end_src

    Las definiciones de tipos de dato también pueden utilizar
    variables de tipo:

    #+begin_src haskell
data Talvez a = Nada | Solo a
    #+end_src

    Los tipos de dato también pueden ser definiciones inductivas; por
    ejemplo, los números naturales

    #+begin_src haskell
data Nat = Zero
         | Suc Nat
    #+end_src

    #+begin_src haskell
cero :: Nat
cero = Zero

tres :: Nat
tres = Suc (Suc (Suc Zero))

cuatro :: Nat
cuatro = Suc tres
    #+end_src

    Ahora, por fin, con las listas, ¿cómo seguimos con la definición?

    #+begin_src haskell
  data Lista a = Vacia -- La lista vacia es una lista de elementos de
                       -- tipo a
               | Cons a (Lista a) -- Un elemento concatenado con otra
                                  -- lista de elementos de tipo a es
                                  -- una lista con elementos de tipo a
    #+end_src

    Afortunadamente /haskell/ ya define este tipo de listas.

    #+begin_src haskell
data [] a = [] | a : ([] a)
    #+end_src

    Por ejemplo, una lista con número enteros

    #+begin_src haskell
enteros :: [] Int
enteros = 1 : 2 : 3 : 4 : 5 : []
    #+end_src

    Pero /haskell/ ofrece una sintaxis más corta para representar listas
    (y el tipo de una lista):

    #+begin_src haskell
enteros2 :: [Double]
enteros2 = [1.24,5.2,7.5,9.3]
    #+end_src

**** Tipos sinónimo

     Nosotros podemos hacer sinónimos de tipos de dato:

     #+begin_src haskell
type Calificacion = Double
type Clase = [Alumnos]
type Paleta = [Color]
     #+end_src

     #+begin_src haskell
alumnos1 :: Clase
alumnos1 = [erik, juan, alberto]
     #+end_src
**** Strings

     Sí, sí existen cadenas en haskell, pero éstas se definen como un
     sinónimo de tipo:

     #+begin_src haskell
type String = [Char]
     #+end_src

     Y para escribir cadenas de texto, haskell nos da la posibilidad
     de usar =""= para representarlas.

     *No olviden que las comillas simples =''= denotan caracteres*
     
*** Condicionales

    Como en cualquier lenguaje de programación, tenemos expresiones
    condicionales para manejar casos en los que se cumpla una
    propiedad:

    La sintaxis que tiene es la siguiente:

    =if <expresión booleana> then <expr de tipo A> else <expr de tipo A>=

    #+begin_src haskell
ghci> if 4 < 5 then "Primer caso" else "Segundo caso"
"Primer caso"  
    #+end_src

    #+begin_src haskell
ghci> if 4 < 3 then "Primer caso" else "Segundo caso"
"Segundo caso"
    #+end_src

    Es importante que los resultados tanto del =then= como del =else= sean
    del mismo tipo, si no, nos va a dar error:

    #+begin_src haskell
ghci> if 3 < 4 then "Primer caso" else 2.5
    #+end_src

    #+begin_src haskell
mimax :: Int -> Int -> Int
mimax n m = if n > m then n else m
    #+end_src

    La otra opción que tenemos para manejar casos es con guardias, y
    éstas son exclusivas cuando se definen funciones.

    #+begin_src haskell
compara :: Int -> Int -> String
compara n m | n < m = "El primero es menor que el segundo"
            | n == m = "Son iguales"
            | otherwise = "El primero es mayor que el segundo"
    #+end_src

    Estas suelen reducir la sintaxis cuando son más las condiciones
    que se deben revisar, sin embargo, debes cerciorarte de ser
    completo con tus condiciones, es decir, que al menos una condición
    se cumpla.

    Para asegurar esto siempre es recomendable usar poner un caso para
    cuando ninguna de las anteriores se haya cumplido.

    #+begin_src haskell
compara2 :: Int -> Int -> String
compara2 n m | n < m = "El primero es menor que el segundo"
             | n == m = "Son iguales"
             | otherwise = "El primero es mayor que el segundo"
    #+end_src

*** Coincidencia de patrones

    Éste se le conoce en inglés como /pattern matching/ y en español
    muchas veces lo encontrarán como /caza de patrones/.

    ¿Cómo podemos utilizar funciones con éstos tipos de dato?

    #+begin_src haskell
describe :: Color -> String
describe color = case color of
                   Rojo -> "El color es rojo"
                   Verde -> "El color es verde"
                   Azul -> "El color es azul"
    #+end_src

    #+begin_src haskell
describe2 :: Color -> String
describe2 Rojo = "El color es rojo"
describe2 Verde = "El color es verde"
describe2 Azul = "El color es azul"
    #+end_src

    #+begin_src haskell
predecesor :: Nat -> Nat
predecesor Zero = Zero
predecesor (Suc n) = n
    #+end_src

    #+begin_src haskell
ceroUno :: Nat -> Nat
ceroUno Zero = Suc Zero
ceroUno n = n
    #+end_src

    #+begin_src haskell
esZero :: Nat -> Bool
esZero Zero = True
esZero _ = False
    #+end_src

    ¿Ahora, cómo hacemos coincidencia de patrones con listas?

    #+begin_src haskell
alMenosUno :: [a] -> Bool
alMenosUno [] = False
alMenosUno _ = True
    #+end_src

    Si queremos obtener la cabeza de una lista:

    #+begin_src haskell
cabeza :: [a] -> a
cabeza (x:xs) = x
    #+end_src

    Si queremos obtener la cola de una lista:

    #+begin_src haskell
cola :: [a] -> [a]
cola (x:xs) = xs
    #+end_src

    Suma en naturales:

    $+(0,x)=x$

    $+(s(n), m)=s(n+m)$

    #+begin_src haskell
sumaNats :: Nat -> Nat -> Nat
sumaNats Zero m = m
sumaNats (Suc n) m = Suc (sumaNats n m)
    #+end_src

    Niveles en un árbol:

    Consideremos la definición de árboles binarios que viene en su
    primera práctica:

    #+begin_src haskell
data Bin a = Vacio
           | Nodo a (Bin a) (Bin a) deriving Show
    #+end_src

    Ahora queremos una función que nos regrese el número de hojas que hay en un árbol.

    Una hoja es un árbol cuyos hijos izquierdo y derecho son vacíos.

    #+begin_src haskell
hojas :: Bin a -> Int
hojas Vacio = 0
hojas (Nodo a Vacio Vacio) = 1
hojas (Nodo a l r) = hojas l + hojas r
    #+end_src

    El nivel de un árbol:

    #+begin_src haskell
nivel :: Bin a -> Int
nivel Vacio = -1
nivel (Nodo a l r) = 1 + max (nivel l) (nivel r)
    #+end_src

*** Funciones de orden superior

    Una función de orden superior, es una función que puede recibir
    como parámetro otra función.

    Por ejemplo, las derivadas e integrales son funciones que reciben
    como parámetro otra función.

    En caso de /haskell/ no vamos a derivar ni nada, pero utilizaremos
    funciones de orden superior.

    Por ejemplo, ¿qué pasa si queremos sumar uno a todos los números
    de una lista?

    #+begin_src haskell
aumenta :: [Int] -> [Int]
aumenta [] = []
aumenta (x:xs) = x+1 : aumenta xs
    #+end_src

    Y ahora, ¿si lo que queremos es elevar al cuadrado todos los
    números de una lista?

    #+begin_src haskell
eleva :: [Int] -> [Int]
eleva [] = []
eleva (x:xs) = x^2 : eleva xs
    #+end_src

    Las dos funciones son muy similares, ¿es posible generalizarlas?

    Sí, con funciones de orden superior:

    #+begin_src haskell
mimap :: (a -> b) -> [a] -> [b]
mimap f [] = []
mimap f (x:xs) = f x : mimap f xs
    #+end_src

    Entonces, ¿cómo elevamos al cuadrado todos los elementos de una lista?

    #+begin_src haskell
ghci> mimap (\x -> x ^ 2) [1,2,3,4,5]
[1,4,9,16,25]
ghci> mimap (\x -> x + 1) [1,2,3,4,5]
[2,3,4,5,6]
    #+end_src

    Ahora, qué si queremos 
    
* Lógica proposicional en Haskell
   
  #+begin_src haskell
type Name = String

data Prop = Var Name | Val Bool
          | Neg Prop
          | Prop #||# Prop
          | Prop #&&# Prop
          | Prop #-># Prop
          | Prop #<># Prop

infixl 7 #&&#, #||#
infixr 8 #->#, #<>#
  #+end_src

* Prolog

  /Prolog/ es un lenguaje de programación dentro del paradigma declarativo.

  Es un lenguaje lógico, en donde un programa es un conjunto de hechos
  y reglas, que definen relaciones, de tal forma que un cómputo se
  vuelve una consulta en éste programa.

** Predicados y constantes

   En /Prolog/ podemos definir predicados sobre constantes concretas, lo
   único que se requiere es que tanto el nombre del predicado como el
   nombre de nuestra constante comience con minúscula.

   Por ejemplo, el siguiente predicado nos dice que su parámetro es escritor.

   #+begin_src prolog
escritor(vargas_llosa). %% Mario Vargas Llosa es un escritor
escritor(carlos_fuentes). %% Carlos Fuentes es un escritor
escritor(ryu_murakami). %% Ryu Murakami es un escritor

%% Sobra decir que los comentarios en prolog se denotan con el símbolo
%% de %
   #+end_src

   
   Éstos predicados pueden tener distinta aridad para dar mejor
   descripciones.

   Por ejemplo, el siguiente predicado es =escribio(X,Y)= y nos dice que
   el autor =X= escribió =Y=.

   #+begin_src prolog
escribio(vargas_llosa, felicidad_en_la_otra_esquina).
%% Mario Vargas Llosa escribió: La felicidad en la otra esquina
escribio(vargas_llosa, los_cachorros).
%% Mario Vargas Llosa escribió: Los cachorros
escribio(carlos_fuentes, gringo_viejo).
%% Carlos Fuentes escribió: Gringo Viejo
escribio(carlos_fuentes, aura).
%% Carlos Fuentes escribió: Aura
escribio(ryu_murakami, azul_casi_transparente).
%% Ryu Murakami escribió: Azul casi transparente
escribio(erik_rangel, notas_lab).
%% Erik Rangel escribió las notas de laboratorio
   #+end_src

   Y así, podemos especificar más propiedades sobre nuestras constantes.

   #+begin_src prolog
latinoamericano(vargas_llosa). %% Mario Vargas Llosa es latinoamericano
latinoamericano(carlos_fuentes). %% Carlos Fuentes es latinoamericano
latinoamericano(erik_rangel). %% Erik Rangel es latinoamericano

reconocimiento(los_cachorros).
%% El libro "Los cachorros" tuvo reconocimiento internacional
reconocimiento(aura).
%% El libro "Aura" tuvo reconocimiento internacional
reconocimiento(azul_casi_transparente).
%% El libro "Azul casi transparente" tuvo reconocimiento internacional
   #+end_src

** Consultas

   Como mencionamos anteriormente, en prolog sólo definimos hechos y
   reglas, tal y como lo hicimos en la sección anterior.

   Toda esta información será nuestra base de conocimientos, y ésta la
   pueden guardar en un archivo con terminación =.pl=

   Podemos interpretar ésta base de conocimientos con la orden =swipl
   archivo.pl=, y nos saldrá un prompt como el siguiente:

   #+begin_src prolog
?-
   #+end_src

   Aquí podemos hacer consultas sobre cosas que definimos en nuestra
   base de conocimientos.

   #+begin_src prolog
?- escritor(carlos_fuentes).
true.
?- escritor(erik_rangel).
false.
?- escribio(ryu_murakami, azul_casi_transparente).
true.
?- escribio(ryu_murakami, aura).
true.
   #+end_src

** Condiciones y Variables

   Podemos dar propiedades más específicas usando condiciones, por
   ejemplo, si queremos expresar la propiedad:

   /Si un escritor latinoamericano escribió un libro que tuvo/
   /reconocimiento internacional, entonces pertenece al boom
   latinoamericano./

   Para expresar ésto en prolog lo podríamos hacer de la siguiente
   forma:

   #+begin_src prolog
boom_lat(X) :- escritor(X),
	       latinoamericano(X),
	       escribio(X,Y),
	       reconocimiento(Y).
   #+end_src

   Las condiciones tienen la siguiente forma:

   =<conclusión> :- <condiciones>.=

   Y también con ésto introducimos a las variables, las cuales tienen
   la única condición de que deben inciar con mayúscula.

   Ahora, con ésto prolog nos puede responder nuevas consultas:

   #+begin_src prolog
?- boom_lat(carlos_fuentes).
true.
?- boom_lat(erik_rangel).
false.
   #+end_src

   También con la introducción de variables, podemos hacer consultas
   más útiles, por ejemplo, podríamos preguntarle a prolog qué autores
   pertenecen al boom latinoamericano.

   #+begin_src prolog
?- boom_lat(X).
X = vargas_llosa
   #+end_src

   Al introducir ésta consulta, prolog nos regresa un posible valor
   para la =X= que le pasamos, sin embargo, no nos devuelve al prompt,
   ésto quiere decir que prolog puede intentar obtener otro posible
   valor para =X=.

   Si la =X= que nos dió es suficiente para nosotros, entonces podemos
   presionar =Enter= o =.= para volver al prompt.

      #+begin_src prolog
?- boom_lat(X).
X = vargas_llosa.
?-
   #+end_src

   Si queremos ver el otro resultado, en su lugar podemos presionar =;=
   hasta que ya no haya más resultados.

   #+begin_src prolog
?- boom_lat(X).
X = vargas_llosa ;
X = carlos_fuentes ;
false.
   #+end_src

** Backtracking

   ¿Por qué al final de la última consulta nos sale =false=?

   Ésto es por la forma en la que prolog hace sus consultas, que es
   por medio de /backtracking/. Esta forma de realizar operaciones
   permite a prolog explorar todas las posibilidades hasta encontrar
   un resultado, de tal forma que al encontrar un resultado que no es
   válido (o necesitar otro posible resultado), prolog pueda regresar
   en las decisiones que tomó y elegir otra posibilidad

   /Prolog/ permite ver cómo se realiza cada una de estas decisiones al
   escribir el predicado =trace=.

   #+begin_src prolog
?- trace.
true.

[trace]  ?-
   #+end_src

   Vemos como cambia el prompt para recordar que la opción =trace= está
   activada.

   Y ahora si hacemos una consulta como lo hacíamos antes, nos va a
   mostrar los pasos intermedios que se hacen antes de devolver un
   resultado.

   #+begin_src prolog
[trace]  ?- boom_lat(X).
   Call: (12) boom_lat(_5940) ? creep
   Call: (13) escritor(_5940) ? creep
   Exit: (13) escritor(vargas_llosa) ? creep
   Call: (13) latinoamericano(vargas_llosa) ? creep
   Exit: (13) latinoamericano(vargas_llosa) ? creep
   Call: (13) escribio(vargas_llosa, _10454) ? creep
   Exit: (13) escribio(vargas_llosa, felicidad_en_la_otra_esquina) ? creep
   Call: (13) reconocimiento(felicidad_en_la_otra_esquina) ? creep
   Fail: (13) reconocimiento(felicidad_en_la_otra_esquina) ? creep
   Redo: (13) escribio(vargas_llosa, _10454) ? creep
   Exit: (13) escribio(vargas_llosa, los_cachorros) ? creep
   Call: (13) reconocimiento(los_cachorros) ? creep
   Exit: (13) reconocimiento(los_cachorros) ? creep
   Exit: (12) boom_lat(vargas_llosa) ? creep
X = vargas_llosa ;
   Redo: (13) escritor(_5940) ? creep
   Exit: (13) escritor(carlos_fuentes) ? creep
   Call: (13) latinoamericano(carlos_fuentes) ? creep
   Exit: (13) latinoamericano(carlos_fuentes) ? creep
   Call: (13) escribio(carlos_fuentes, _22466) ? creep
   Exit: (13) escribio(carlos_fuentes, gringo_viejo) ? creep
   Call: (13) reconocimiento(gringo_viejo) ? creep
   Fail: (13) reconocimiento(gringo_viejo) ? creep
   Redo: (13) escribio(carlos_fuentes, _22466) ? creep
   Exit: (13) escribio(carlos_fuentes, aura) ? creep
   Call: (13) reconocimiento(aura) ? creep
   Exit: (13) reconocimiento(aura) ? creep
   Exit: (12) boom_lat(carlos_fuentes) ? creep
X = carlos_fuentes ;
   Redo: (13) escritor(_5940) ? creep
   Exit: (13) escritor(ryu_murakami) ? creep
   Call: (13) latinoamericano(ryu_murakami) ? creep
   Fail: (13) latinoamericano(ryu_murakami) ? creep
   Fail: (12) boom_lat(_5940) ? creep
false.
   #+end_src

** Números y Operadores

   Como comúnmente tenemos en los lenguajes de programación, los operadores aritméticos son:

   #+begin_src prolog
suma(X, Y, X + Y).
resta(X, Y, X - Y).
multiplicacion(X, Y, X * Y).
division(X, Y, X / Y).
   #+end_src

   Los operadores de comparación:

   #+begin_src prolog
igualdad(X, Y) :- X =:= Y.
desigualdad(X, Y) :- X =\= Y.
menor_que(X, Y) :- X < Y.
mayor_que(X, Y) :- X > Y.
menor_igual(X, Y) :- X =< Y.
mayor_igual(X, Y) :- X >= Y.
   #+end_src
   
*** Negación como falla

    En /Prolog/ toda proposición que no haya sido escrita en la base de
    conocimientos (o no pueda ser determinada) será considerada como
    =false=, pero cabe decir que este resultado no es definitivo, sólo
    nos dice que no se encontró una forma de demostrarlo.

    Por ejemplo, nostros no le dijimos a /Prolog/ que /Shakespeare/ fue un
    escritor, por lo que tendremos como resultado de una consulta así
    lo siguiente:

    #+begin_src prolog
?- escritor(shakespeare).
false.
?-
    #+end_src

    Nos dirá que esto es falso a pesar de que nosotros sepamos que
    /Shakespeare/ sí fue un escritor.

    Por ello no existe como tal un operación de negación en prolog,
    pero sí tendremos un operador para ver si algo /no es demostrable/.

    #+begin_src prolog
no_escritor(X) :- \+ escritor(X).
    #+end_src

*** Unificación

    En prolog tenemos dos operadores distintos para verificar que dos
    expresiones son unificables:

    #+begin_src prolog
suma2(X, Y, RES) :- RES = X + Y.
suma3(X, Y, RES) :- RES is X + Y.
    #+end_src

    La primera de ellas, sólo podrá decir si =RES= en efecto unifica con
    la expresión =X+Y=, y de hecho esta unificación es la que se hacía
    cuando explicamos los operadores; mientras que la segundo podrá
    decir cuando =RES= sea unificable con el resultado de la expresión
    =X+Y=.

** Ejemplos

   Calcular la suma de todos los números naturales menores a un $n$:

   #+begin_src prolog
suma_gauss(0, 0).
suma_gauss(N, RES) :- N >= 0,
		      N1 is N - 1,
		      suma_gauss(N1, R1),
		      RES is N + R1.
   #+end_src

   Y le podemos preguntar a =prolog= el resultado

   #+begin_src prolog
?- suma_gauss(5,X).
X = 15 ;
false.
   #+end_src

   Como vemos, =prolog= piensa que puede haber otro resultado, sin
   embargo al nosotros tener el valor de la variable =RES= es porque ya
   sabemos el resultado final, y no necesitamos más resultados.

   Para este tipo de operaciones es necesario indicarle a =prolog= que
   no existen más resultados, y para ello podemos utilizar el operador
   de corte después de que se sepa que ya hay un resultado.

   #+begin_src prolog
suma_gauss(0, 0) :- !.
suma_gauss(N, RES) :- N >= 0,
		      N1 is N - 1,
		      suma_gauss(N1, R1),
		      RES is N + R1,
		      !.
   #+end_src

   #+begin_src prolog
?- suma_gauss(5,X).
X = 15.
   #+end_src

   Ahora, podemos hacer un predicado que calcula el factorial de un número.

   #+begin_src prolog
factorial(0,1) :- !.
factorial(N, RES) :- N >= 0,
		     N1 is N - 1,
		     factorial(N1, R1),
		     RES is N * R1,
		     !.
   #+end_src

   #+begin_src prolog
?- factorial(5,X).
X = 120.
   #+end_src

   Un predicado que nos da el n-ésimo número fibonacci.

   #+begin_src prolog
fibonacci(0,0) :- !.
fibonacci(1,1) :- !.
fibonacci(N, RES) :- N > 1,
		     N1 is N - 1,
		     N2 is N - 2,
		     fibonacci(N1, R1),
		     fibonacci(N2, R2),
		     RES is R1 + R2,
		     !.
   #+end_src

** Listas y comodines

   Las listas se definen inductivamente bajo la definición recursiva convencional:

   Podemos tener la lista vacía, y ésta se representa como =[]=

   Podemos tener una lista con cabeza =X= y cola =XS=, y se representa
   como =[X|XS]=.

   También podemos construir listas con al menos un primer y segundo
   elemento; éste se escribe como =[X,Y|XS]=, y así para cualquier
   cantidad de elementos.

   Por ejemplo, haremos un predicado que nos calcula la longitud de una
   lista:

   #+begin_src prolog
longitud([],0).
longitud([_|XS],RES) :- longitud(XS, N),
			RES is N + 1.
   #+end_src

   En este caso nótese que no es necesario utilizar el operador de
   corte, pues una lista sólo va a unificar con sólamente uno de los
   dos casos que definimos, o la lista vacía, o la lista con al menos
   un elemento, por lo que no va a intentar más caminos después de
   devolver el primer resultado.

   Ahora, un predicado que nos da la concatenación de dos listas:

   #+begin_src haskell
concatena([],YS,YS).
concatena([X|XS],YS,[X|R1]) :- concatena(XS,YS,R1).
   #+end_src

   Un predicado que nos da la reversa:

   #+begin_src prolog
reversa([],[]).
reversa([X|XS],RES) :- reversa(XS,R1),
		       concatena(R1,[X],RES).
   #+end_src

   Un predicado que da la suma de una lista de números:

   #+begin_src prolog
suma([],0).
suma([X|XS],RES) :- suma(XS, R1),
		    RES is R1 + X.
   #+end_src
